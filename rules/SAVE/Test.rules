//import java.net.URLEncoder


val telegramAction = getActions("telegram","telegram:telegramBot:openhab")


var HSBType hsb
var PercentType p
//var Timer timer1 = null

var String Treppe_morgens = "121,4,51"
var String Wohnen_abends = "39,97,10"
var String Licht_aus = "0,0,0"

var Number Rotwert_Treppe_Test = 1
var Number Gruenwert_Treppe_Test = 1
var Number Blauwert_Treppe_Test = 0
var Number Weisswert_Treppe_Test = 0

var boolean Feuchtigkeitscheck = false

var Number counter = 1


val Number Lamellen_vollstaendig_geschlossen = 99
val Number Lamellen_lichtundurchlaessig = 32
val Number Lamellen_offen = 1

val Number max_false_positives = 1		// zulaessige Anzahl false positives bei Quorumbildung
val Number max_false_negatives = 1		// zulaessige Anzahl false negatives bei Quorumbildung



/* rule "Test Quorum XX"
when
        Item Testschalter2 changed
then
	var boolean b = QuorumMin.apply(Markus_daheim_Gruppe, max_false_negatives)
        logInfo("test","debug Quorum 1")
	var boolean b2 = QuorumMax.apply(Markus_daheim_Gruppe, max_false_positives)
        logInfo("test","debug Quorum 2")

        logInfo("test","Markus_daheim_Gruppe = " + Markus_daheim_Gruppe + "; QuorumMin(Markus_daheim_Gruppe," + max_false_negatives + ") = " + b
		+ " ; QuorumMax(Markus_daheim_Gruppe," + max_false_positives + ") = " + b2)

end


rule "Ferien TEST"
when
        Item FerienTest received update
then
        logDebug("test", "Ferienstatus-Pr체fung: Schulferien = " + Schulferien.state + "; Schulferien-Name = " + FerienTest.state)
        if (FerienTest.state != "false" && FerienTest.state != "NULL") {
                postUpdate(SchulferienName,FerienTest.state)
                logInfo("test", "FerienTest hat sich ge채ndert, Ferien Status aktualisiert: " + Schulferien.state + " (" + SchulferienName.state + ")")
        }
end
*/

/*
val Functions$Function3 <GroupItem,Number,Number,Boolean> Blinktest = [ g, duration, interval |
	var Timer timer1 = null
	var Boolean ret = true
	var OnOffType s = g.getStateAs(OnOffType)
	if (timer1 !== null) return false; // if already blinking ignore this event

	// Create a timer to blink the light for <duration> seconds
	var DateTime endTime = now.plusSeconds(duration.intValue)
	logDebug("test", "debug vor timeStarted, s = " + s + "; l채uft von " + now.toString + " bis " + endTime)
	timer1 = createTimer(now, [ |
		logDebug("test", "debug in createTimer nach timeStarted")
		if (s == ON) {
			logDebug("test", "Sende Blinken, s = " + s + "; int = " + interval)
			s = OFF
		} else {
			logDebug("test", "Stoppe Blinken, s = " + s + "; int = " + interval)
 			s = ON
		}
		g.sendCommand(s)
		if (now.isBefore(endTime)) {
			logDebug("test", "timer1 = " + timer1?.toString + "; setze n채chsten Timer in interval = " + interval + " Sekunden.")
			timer1.reschedule(now.plusSeconds(interval))
			logDebug("test", "Timer rescheduled.")
		} else {
			timer1 = null
			logDebug("test", "Beende Blinken.")
			g.sendCommand(OFF)
		}
	])

	return ret
]


rule "dtest"
when
        Item testnumber received command
then
	val duration = receivedCommand as Number
	val Number interval = 2

	var OnOffType s = (if (OG_Markus_Decke.state > 0) ON else OFF)
	if (timer1 !== null) return; // if already blinking ignore this event

	// Create a timer to blink the light for <duration> seconds
	val timeStarted = now
	timer1 = createTimer(now, [ |
		logInfo("test", "Sende/Stoppe Blinken, s = " + s + "; dur/int = " + duration + "/" + interval)
		Blinktest.sendCommand(if (s == ON) OFF else ON)
		if (s == ON) s = OFF else s = ON
		
		if (now.isBefore(timeStarted.plusSeconds(duration.intValue))) {
			logInfo("test", "Setze neuen Timer in " + int + " Sekunden.")
			timer1.reschedule(now.plusSeconds(interval))
		}
		else {
			timer1 = null
			Blinktest.sendCommand(OFF)
			OG_Markus_Decke.sendCommand(OFF)
		}
	])

//	return true
end

rule "Test Blinken"
when
        Item Testschalter2 received update
then
	telegramAction.sendTelegram(markus_telegram_chatid.state,"Blinktest Telegram!")
//	playSound("webaudio","doorbell.mp3") 
//	Blinktest.apply(Blinktest,10,2)
//	Blinktest.apply(Blinklicht,10,1)
//	testnumber.sendCommand(10)
	logInfo("test", "Blinktest Telegram")
end
*/

/*
rule "Test Telegram"
when
        Item Testschalter2 received update
then
	val msg = "telegram Test, Ziel ChatIDs " + markus_telegram_chatid.state.toString + " / " + bianca_telegram_chatid.state.toString
	logInfo("test", msg)
	val urlmsg = URLEncoder::encode("Hallo Markus, dies ist telegram Test", 'UTF-8')
	sendHttpGetRequest("http://api.callmebot.com/start.php?user=+4915114206698&lang=de-DE-Standard-B&text=" + urlmsg)
	//telegramAction.sendTelegram((markus_telegram_chatid.state as Number).longValue(),"nochmal Kuckuck!")
	//telegramAction.sendTelegram((bianca_telegram_chatid.state as Number).longValue(),"Kuckuck! Bitte Bescheid sagen wenn dies ankommt.")
end
*/

/*
rule "print zwave neighbours" when
	Item Testschalter2 changed
then
	 var curlout= sendHttpGetRequest("http://192.168.178.40:8080/rest/things",5000)	 
     var  numThings = transform("JSONPATH", "$.length()", curlout)	
	 var String totallist=""
	 var i = 0  
     while(i < Integer.parseInt(numThings)) {	  
	   var String bridgeUID = transform("JSONPATH", "$.["+i+"].bridgeUID", curlout)
	   var String UID = transform("JSONPATH", "$.["+i+"].UID", curlout)
	   if (( bridgeUID=="zwave:serial_zstick:ddd23e6c") || (UID=="zwave:serial_zstick:ddd23e6c")) {
			var String newValue = transform("JSONPATH", "$.["+i+"].properties.zwave_neighbours", curlout)
			var String nodeid =   transform("JSONPATH", "$.["+i+"].properties.zwave_nodeid", curlout)
			var String nodelabel =   transform("JSONPATH", "$.["+i+"].label", curlout)
			totallist=totallist+ "Thing: " + i +" id "+ nodeid+ " List: "+ newValue+" "+nodelabel+"\n"	   
	  
	   }
	   i=i+1
	 }

	 logInfo("test", "List of ZWave neighbours: \n" + totallist)
end
*/

/*
rule "switch TV to Prime" when
	Item TVtest received command
then
	var String curlout
	var String appname


	EG_Wohnen_TV.sendCommand(UP)	// Klappe hoch
	TV_alive.sendCommand(ON)	// WakeOnLAN

curl -X POST http://192.168.178.57:8001/ws/apps/YouTube curl -X POST http://192.168.178.57:8001/ws/apps/Netflix

curl -X POST http://192.168.178.57:8001/api/v2/applications/3201512006963 (Plex)

curl -X POST http://192.168.178.57:8001/api/v2/applications/3201512006785 (Prime)

curl -X POST http://192.168.178.57:8001/api/v2/applications/3201807016597 (Apple TV)

curl -X POST http://192.168.178.57:8001/api/v2/applications/3201901017640 (Disney+)
	switch (receivedCommand) {
		case 1: {
			curlout = sendHttpGetRequest("http://samsungtv:8001/api/v2/applications/3201512006785",5000)
			appname = "prime app"
		}
	}
	logDebug("test", "Instructed TV to switch to " + appname + ":\n" + curlout)
end
*/

/*
rule "test update proxy temperature values"
when
	Item TempTerrasseRohwerte changed
	or
	Item Auge_Korrektur received update
	or
	Item Auge2_Korrektur received update
then
	var QuantityType<Number> t
//	var QuantityType<Number> t2
	var Number kF

	logDebug("Garten", "debug proxy temps: Auge_Korrektur=" + Auge_Korrektur.state + "; Garten_Auge_Temp_roh=" + Garten_Auge_Temp_roh.state)

	// folgende Zeile ergibt Kelvin (zu hoch)
	//kF = (Garten_Auge_Temp_roh.state as Number) + (Auge_Korrektur.state as Number)
	kF = (Garten_Auge_Temp_roh.state as Number).doubleValue
	logDebug("Garten", "debug 0 temps: t=" + t + "; kF=" + kF)
	kF = kF + (Auge_Korrektur.state as Number).doubleValue
	logDebug("Garten", "debug 0b temps: t=" + t + "; kF=" + kF)
	kF = (Garten_Auge_Temp_roh.state as Number).doubleValue + (Auge_Korrektur.state as Number).doubleValue
	logDebug("Garten", "debug 0c temps: t=" + t + "; kF=" + kF)
	t = (Garten_Auge_Temp_roh.state as Number).doubleValue
	logDebug("Garten", "debug 1 temps: t=" + t + "; kF=" + kF)
	t = t + (Auge_Korrektur.state as Number).doubleValue
	logDebug("Garten", "debug 1b temps: t=" + t + "; kF=" + kF)
	t = (Garten_Auge_Temp_roh.state as Number).doubleValue + (Auge_Korrektur.state as Number).doubleValue
	logDebug("Garten", "debug 1c temps: t=" + t + "; kF=" + kF)
	//t = kF.doubleValue + Garten_Auge_Temp_roh.state
	//t = kF + Garten_Auge_Temp_roh.state
	logDebug("Garten", "debug 2 temps: t=" + t + "; kF=" + kF)
	Garten_Auge_Temp.postUpdate(kF)

	// Original
	//t = Garten_Auge2_Temp_roh + Auge2_Korrektur
	t = (Garten_Auge2_Temp_roh.state as Number).doubleValue + (Auge2_Korrektur.state as Number).doubleValue
	logDebug("Garten", "debug proxy temps2: t=" + t + "; kF=" + kF)
	Garten_Auge2_Temp.postUpdate(t as Number)

	logDebug("Garten", "Aktualisiere korrigierte Aussensensor-Temperaturen: " + Garten_Auge_Temp_roh.state + " -> " + Garten_Auge_Temp.state + " / " + Garten_Auge2_Temp_roh.state + " -> " + Garten_Auge2_Temp.state)
end
*/

/*
rule "Test Day n"
when
        Item testnumber received command
then
        val Kurzarbeit_Mai = newArrayList(OFF,OFF,OFF,OFF,OFF,OFF,OFF,OFF,OFF,OFF,OFF,OFF,OFF,ON,ON,OFF,OFF,OFF,OFF,ON,ON,ON,OFF,OFF,OFF,OFF,ON,ON,ON,OFF,OFF)
        val Kurzarbeit = newArrayList((newArrayList(OFF,OFF,ON,OFF)), (newArrayList(OFF,OFF,OFF,OFF)), (newArrayList(OFF,OFF,OFF,OFF)), (newArrayList(OFF,OFF,OFF,OFF)), (newArrayList(OFF,OFF,OFF,OFF)), (newArrayList(ON,ON,ON,ON)))

	logDebug("Test", "Test A1 Kurzarbeit_Mai(" + testnumber.state + ") = " + Kurzarbeit_Mai.get((receivedCommand as Number).intValue - 1))
	var k = Kurzarbeit.get(0).get((receivedCommand as Number).intValue - 1)
	logDebug("Test", "Test A2 Kurzarbeit_Mai(" + testnumber.state + ") = " + k + "/" + k.get((receivedCommand as Number).intValue - 1))

	var Number Tag = now.getDayOfMonth
	if (Kurzarbeit_Mai.get((now.getDayOfMonth).intValue - 1) == ON){
//	if (Kurzarbeit_Mai.get((Tag as Number).intValue - 1) == ON){
		logDebug("Test", "arbeitsfreier Tag!")
		//arbeitsfreierTag.postUpdate(ON)
	} else {
		logDebug("Test", "kein arbeitsfreier Tag!")
		//arbeitsfreierTag.postUpdate(OFF)
	}
	logDebug("Test", "Test B Kurzarbeit(1) = " + Kurzarbeit.get(1,receivedCommand) + "; Kurzarbeit(2) = " + Kurzarbeit.get(5,testnumber.state))
end
*/

/*
rule "Alexa-Test"
when
        Item Szene_TV received command
	or
        Item Szene_Kino received command
	or
        Item Szene_morgens received command
	or
        Item Szene_tagsueber received command
	or
        Item Szene_abends received command
	or
        Item Szene_nachts received command
	or
        Item Szene_Aus received command
then
	var String s = "tagsueber"


	if (triggeringItem !== null) {
		s = triggeringItem.name
	}
        logInfo("test","Szenen-Auftrag von Alexa erhalten f체r " + s + " bzw. " + triggeringItem)

	switch (s) {
		case "Szene_TV": {
			Szene.sendCommand(100)
		}
		case "Szene_Kino": {
			Szene.sendCommand(101)
		}
		case "Szene_morgens": {
			Szene.sendCommand(1)
		}
		case "Szene_tagsueber": {
			Szene.sendCommand(2)
		}
		case "Szene_abends": {
			Szene.sendCommand()
		}
		case "Szene_nachts": {
			Szene.sendCommand(4)
		}
		case "Szene_Aus": {
			Szene.sendCommand(0)
		}
	}

	var String t = "Szene " + s
	// amazonechocontrol
	Echo_Wohnen_TTS_Volume.sendCommand(30)
	Echo_Wohnen_TTS.sendCommand(t)
end
*/

/*
rule "Homegear Thermostat Test MANU"
when
	Item Testschalter received command ON
then
	OG_Markus_Thermo_Modus.sendCommand("MANU-MODE")
end

rule "Homegear Thermostat Test AUTO"
when
	Item Testschalter received command OFF
then
	OG_Markus_Thermo_Modus.sendCommand("AUTO-MODE")
end
*/


rule "TTS Test 2"
when
	Item Kaffeeansage_auch_einen received command
then
	var String msg = "W체rdest du mir bitte einen Kaffee anstellen ?"
//	var String msg = "Da ist jemand an der T체r"
//	var String s = "file:///etc/openhab2/sounds/doorbell.mp3"
//	var String s = "file:doorbell-alexa.mp3"
	var String t = "Testansage Szene " + Szene.state.toString

//        Echo_Wohnen_TTS_Volume.sendCommand(Durchsagen_Lautstaerke.state)
//        Echo_Wohnen_Volume.sendCommand(Durchsagen_Lautstaerke.state)
//	setMasterVolume(Lautstaerke_Klingel) // funktioniert eh nicht, ggfs. nach Restart manuell alsamixer benutzen
	t = "<speak>" +
//		"<audio src=\"" + s + "\"/>" +
		"<audio src=\"soundbank://soundlibrary/home/amzn_sfx_doorbell_chime_01\" />" +
//		"<amazon:emotion name=\"excited\" intensity=\"high\">" +
		msg +
//		"</emphasis></amazon:emotion></speak>" +
		"</speak>"

        logDebug("test","Ansage " + msg + " mit Lautstaerke " + Durchsagen_Lautstaerke.state)
	Echo_Wohnen_TTS.sendCommand(t)
end


/*
rule "debug ICAL"
when
	Item Testschalter received command
then
	var ferien = sendHttpGetRequest("https://www.schulferien.org/media/ical/deutschland/ferien_nordrhein-westfalen_2020.ics?k=Z-RCusfVPE4nXwLNhcXk4Dr94v10KjXTJGOJg48TZ1L2nar4VPfqbmEt0YuPLrxrqRCXeXJ8SgTolQUwjsL-gP4ixYKvfNtLea0ADFJkhf4", 3000)
	var feiertag = sendHttpGetRequest("https://www.schulferien.org/media/ical/deutschland/feiertage_nordrhein-westfalen_2020.ics?k=QGUz9zPIs9IbKM6dCQXhlfQCXyUDAoRVy4VkJaTJZkuRkp9WZRrPmObcmkOLkIfj1Mzvoiuec50gFd1KWpH-5lb0sMYikp6omuvUqMheY5k", 3000)
        logDebug("test","fetched : " + ferien)

        var f1 = transform("JS","ical_Ferien.js",ferien)
        var f2 = transform("JS","ical_Ferien.js",feiertag)

        logDebug("test","result : " + f1 + " / " + f2)
end
*/

rule "Batterie wird geladen oder nicht"
when
	Item PVbatteryPower received update
then
	testBatteryIsCharging.postUpdate(if (PVtotalDCpower.state >= PVtotalActivePower.state) ON else OFF)
end

